
#######################################################################
# R function: This function is used to nonparametrically estimate a single unknown function of continuous 
#             covariate using Full Gaussian Process. 
# This function is used within BNR_GP
#
#
# 
#
#
#

Bayes.PP.FUN<-function(eta_other_iter,M_mat,C_star,D,P_w_inv,tau_iter,L,id0_mcw,a,b,phi_set,
                       x.dist_row,cross_dist,P_w,P_xw,U_iter,Vb_iter){

########################################################################### update eta for fun
# eta_oter_iter is the sum of all other eat vectors corresponding to other functions
# e.g., eta_oter_iter <- eta_2_iter
# M_mat <- M_mat_j
# C_star <- C_star_j
# D <- D_j
# P_w_inv <- P_w_inv_j
# tau_iter <- tau_j_iter
# L <- L_j
# id0_mcw <- id0_mcw_1
# a <- a_1; b <- b_j
# x.dist_row <- x.dist_row_1
# cross_dist <- cross_dist_1
MU_iter <- crossprod(M_mat,U_iter-Vb_iter-eta_other_iter)
DP <- forceSymmetric(crossprod(C_star,D)%*%C_star+P_w_inv*tau_iter)
Sig_eta_iter_decomp <- chol(DP) # decomposition of presicion matrix
Sig_eta_iter <- chol2inv(Sig_eta_iter_decomp) # covariance matrix
mu_eta_iter <- Sig_eta_iter%*%crossprod(C_star,MU_iter)   # mean of eta_iter
# sample from presicion matrix,solve uptri system
eta_w_iter <- as.numeric(backsolve(Sig_eta_iter_decomp,rnorm(L))+mu_eta_iter) 

#eta_w_iter <- eta_w_iter-eta_w_iter[id0_mcw]
eta_w_iter <- eta_w_iter-mean(eta_w_iter)

eta_x_iter <- C_star%*%eta_w_iter
eta_iter = M_mat%*%eta_x_iter

#################################### update tau_1
bb = crossprod(eta_w_iter,P_w_inv)%*%eta_w_iter/2
a_star=a+L/2;b_star=as.numeric(b+bb)
tau_iter = rgamma(1,a_star,b_star)

########################################################################### update the covariance matrix
phi_iter <- phi_set[1]
trphi_iter <- phi_set[2]
phi_min <- phi_set[3]
phi_max <- phi_set[4]

trphi_new = rnorm(1,trphi_iter,trphi_tune)
phi_new = (exp(trphi_new)*phi_max+phi_min)/(1+exp(trphi_new))

P_w_new = toeplitz(matern(x.dist_row, phi= phi_new, kappa = kap)) # Correlation matrix of x.knots, which is also a toeplitz matrix
#print("GOOD!")
P_w_inv_new = TrenchInverse(P_w_new) # Inverse the Correlation matrix of x.knots

P_xw_new = matern(cross_dist,phi=phi_new,kappa=kap) # correlation matrix of x and x.knots
C_star_new = P_xw_new%*%P_w_inv_new

C_star_eta_new = U_iter-M_mat%*%C_star_new%*%eta_w_iter-Vb_iter
C_star_eta = U_iter-eta_iter-Vb_iter

rat1= -determinant(P_w_new)$modulus/2-tau_iter*crossprod(eta_w_iter,P_w_inv_new)%*%eta_w_iter/2-crossprod(C_star_eta_new)/2
rat2= -determinant(P_w)$modulus/2-tau_iter*crossprod(eta_w_iter,P_w_inv)%*%eta_w_iter/2-crossprod(C_star_eta)/2

rat_2 = (phi_new-phi_min)*(phi_max-phi_new)/((phi_max-phi_iter)*(phi_iter-phi_min))
rat = min(1,as.numeric(exp(rat1-rat2)*rat_2))

ber_rat = rbinom(1,1,rat)
phi_iter = ber_rat*phi_new+(1-ber_rat)*phi_iter
trphi_iter = ber_rat*trphi_new + (1-ber_rat)*trphi_iter
#accept.phi = accept.phi + ber_rat  

if(ber_rat==1){ # if phi_new was accepted, then update all matrics
  P_w <- P_w_new # P star matrix
  P_w_inv <- P_w_inv_new
  P_xw <- P_xw_new # correlation matrix of x and x.knots
  C_star <- C_star_new    
}

return(list("eta_w"=eta_w_iter,"eta_x"=eta_x_iter,"eta"=eta_iter,"tau"=tau_iter,"phi"=phi_iter,
            "trphi"=trphi_iter,"P_w"=P_w,"P_w_inv"=P_w_inv,"P_xw"=P_xw,"C_star"=C_star ))
}